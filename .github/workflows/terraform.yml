name: "Vprofile IAC"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  AWS_REGION: ap-south-1
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  EKS_CLUSTER: vprofile-eks

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3
      - name: Terraform init
        id: init
        run: |
          terraform init -backend-config="bucket=$BUCKET_TF_STATE" \
                         -backend-config="key=terraform.tfstate" \
                         -backend-config="region=$AWS_REGION"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate
        id: validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: |
          terraform plan -no-color -input=false -out planfile || {
            echo "Terraform plan failed. Check the error above."
            exit 1
          }

      - name: Verify plan file
        if: steps.plan.outcome == 'success'
        run: |
          if [ ! -f planfile ]; then
            echo "Plan file not found!"
            exit 1
          fi

      - name: Terraform Apply
        id: apply
        if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/stage') && github.event.name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Get Kube config file
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: |
          if ! aws eks describe-cluster --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }} --query cluster.status --output text | grep -q ACTIVE; then
            echo "EKS cluster ${{ env.EKS_CLUSTER }} is not active or does not exist"
            exit 1
          fi
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Install Ingress Controller
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: |
          if ! kubectl get namespace ingress-nginx >/dev/null 2>&1; then
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
          else
            echo "Ingress controller already installed, skipping..."
          fi

      - name: Cleanup plan file
        if: always()
        run: rm -f planfile
